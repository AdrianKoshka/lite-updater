#!/usr/bin/env python

import pygtk
import gtk
from gtk import gdk
import glib
import apt
import time
import sys
import os
import pyinotify
from threading import Thread
pygtk.require('2.0')
gtk.gdk.threads_init()

iconpath = '/usr/share/icons/Faenza/status/scalable/'
inactive_icon = iconpath + 'starred-symbolic.svg'
working_icon = iconpath + 'appointment-soon.svg'
upgrade_icon = iconpath + 'software-update-available-symbolic.svg'
essential_icon = iconpath + 'software-update-urgent-symbolic.svg'
logo = '/usr/share/litecc/frontend/images/lite_logo.png'


class Autostart(object):

    def user_autostart_path(self):
        config_autostart_path = os.getenv("HOME") + "/.config/autostart/"

        if not os.path.exists(config_autostart_path):
            os.makedirs(config_autostart_path)

        return config_autostart_path + "lite-updater.desktop"

    def is_installed(self):
        return os.path.exists(self.user_autostart_path())

    def install(self):
        with open(self.user_autostart_path(), "w") as desktop_file:
            desktop_file.write("""[Desktop Entry]
Type=Application
Version=0.1
Name=Lite-Updater
GenericName=Lite-Updater
Comment=Linux Lite Update Checker
Exec=/usr/bin/lite-updater
Terminal=false
Categories=GTK;Utility;
StartupNotify=true""")
        return True

    def uninstall(self):
        os.remove(self.user_autostart_path())


class Liteupdater:

    def __init__(self):
        self.icon = gtk.status_icon_new_from_file(inactive_icon)
        self.icon.set_tooltip("Idle")
        self.icon.set_visible(True)

        self.update_running = False

        self.notifier = None
        self.watchdir = '/var/lib/apt'

        self.tooltip_state = {
            'upgrade': 'Updates available' + " " + str(self.count_update()),
            'essential': 'Urgent updates available' +
            " " + str(self.count_update()),
            'inactive': 'No updates available',
            'working': 'Operations in progress'
        }

        self.icon.connect('activate', self.on_left_click)
        self.icon.connect('popup-menu', self.on_right_click)

    def update_cache(self, foo):
        glib.spawn_async(["/usr/bin/gksu", "/usr/scripts/updates-cache"])

    def on_left_click(self, foo):
        glib.spawn_async(["/usr/bin/gksu", "/usr/scripts/updates-gui"])

    def checksources(self, foo):
        glib.spawn_async(["/usr/bin/gksu", "/usr/bin/software-properties-gtk"])

    def doauto_start(self, foo):
        if Autostart().is_installed():
            pass
        else:
            Autostart().install()

    def doauto_remove(self, foo):
        if Autostart().is_installed():
            Autostart().uninstall()
        else:
            pass

    def on_right_click(self, icon, button, time):
        menu = gtk.Menu()

        img1 = gtk.Image()
        img2 = gtk.Image()
        img3 = gtk.Image()
        img4 = gtk.Image()

        about = gtk.ImageMenuItem('gtk-about', None)
        updatechk = gtk.ImageMenuItem('Check for Updates')
        img1.set_from_file(upgrade_icon)
        updatechk.set_image(img1)
        chsources = gtk.ImageMenuItem('Change Sources')
        img2.set_from_file(inactive_icon)
        chsources.set_image(img2)
        installupdate = gtk.ImageMenuItem('Install Updates')
        img3.set_from_file(essential_icon)
        installupdate.set_image(img3)
        refresh = gtk.ImageMenuItem('gtk-refresh', None)
        quit = gtk.ImageMenuItem('gtk-quit', None)

        about.connect('activate', self.show_about_dialog)
        updatechk.connect('activate', self.update_cache)
        chsources.connect('activate', self.checksources)
        installupdate.connect('activate', self.on_left_click)
        refresh.connect('activate', self.update)
        quit.connect('activate', self.quit)
        titleMenuItem = gtk.ImageMenuItem()
        title = gtk.Label()
        title.set_text("<span foreground=\"grey\">" +
                       ("Lite Updater") + "</span>")
        title.set_justify(gtk.JUSTIFY_LEFT)
        title.set_alignment(0, 0.5)
        title.set_use_markup(True)
        titleMenuItem.add(title)
        menu.append(titleMenuItem)
        sep1 = gtk.SeparatorMenuItem()
        menu.append(sep1)
        menu.append(about)

        if Autostart().is_installed():
            enableauto = gtk.ImageMenuItem('Disable Auto-Start')
            img4.set_from_file(essential_icon)
            enableauto.set_image(img4)
            enableauto.connect('activate', self.doauto_remove)
        else:
            enableauto = gtk.ImageMenuItem('Enable Auto-Start')
            img4.set_from_file(upgrade_icon)
            enableauto.set_image(img4)
            enableauto.connect('activate', self.doauto_start)

        menu.append(enableauto)
        sep2 = gtk.SeparatorMenuItem()
        menu.append(sep2)
        menu.append(updatechk)
        menu.append(chsources)
        menu.append(installupdate)
        sep3 = gtk.SeparatorMenuItem()
        menu.append(sep3)
        menu.append(refresh)
        menu.append(quit)

        menu.show_all()
        menu.popup(None, None, gtk.status_icon_position_menu, button, time,
                   icon)

    def show_about_dialog(self, widget):
        about_dialog = gtk.AboutDialog()

        about_dialog.set_destroy_with_parent(True)
        about_dialog.set_name('Lite Updater')
        about_dialog.set_comments('A simple lite update checker'
                                  ' for your tray.')
        about_dialog.set_website('https://github.com/linuxlite/lite-updater')
        about_dialog.set_website_label('Homepage')
        about_dialog.set_icon(gdk.pixbuf_new_from_file(upgrade_icon))
        about_dialog.set_logo(gdk.pixbuf_new_from_file(logo))
        about_dialog.set_copyright('Copyright 2016')
        about_dialog.set_version('0.1')
        about_dialog.set_authors(['Johnathan "ShaggyTwoDope" Jenkins'])
        about_dialog.set_license('''This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA. ''')

        about_dialog.run()
        about_dialog.destroy()

    def quit(self, widget):
        self.notifier.stop()
        sys.exit(0)

    def set_state(self, state):
        icon = eval('{0}_icon'.format(state))
        self.icon.set_from_file(icon)
        self.icon.set_tooltip(self.tooltip_state[state])

    def checkapt(self):

        list_pkgs = []

        try:
            apt_cache = apt.Cache()
        except SystemError:
            return list_pkgs

        apt_cache.open()

        for package_name in list(apt_cache.keys()):
            chosen_package = apt_cache[package_name]

            if chosen_package.is_upgradable:
                pkg = {
                    'name': chosen_package.name,
                    'version': chosen_package.installed.version,
                    'candidate': chosen_package.candidate.version,
                    'essential': chosen_package.essential
                }
                list_pkgs.append(pkg)

        return list_pkgs

    def update(self, ev=None):
        if self.update_running is False:
            self.update_running = True
            self.set_state('working')
            pkglist = self.checkapt()
            if pkglist:
                state = 'upgrade'
                for pkg in pkglist:
                    if pkg['essential'] is True:
                        state = 'essential'
            else:
                state = 'inactive'

            self.set_state(state)

        self.update_running = False

    def count_update(self):

        list_pkgs = []
        count = [0]

        try:
            apt_cache = apt.Cache()
        except SystemError:
            return list_pkgs

        apt_cache.open()

        for package_name in list(apt_cache.keys()):
            chosen_package = apt_cache[package_name]

            if chosen_package.is_upgradable:
                pkg = {
                    'name': chosen_package.name,
                    'version': chosen_package.installed.version,
                    'candidate': chosen_package.candidate.version,
                    'essential': chosen_package.essential
                }
                list_pkgs.append(pkg)
                count[0] += 1

        return count

    def timer_update(self):
        while True:
            self.update()
            time.sleep(3600)

    def main(self):
        wm = pyinotify.WatchManager()
        mask = pyinotify.IN_DELETE | pyinotify.IN_CREATE | pyinotify.IN_MODIFY
        self.notifier = pyinotify.ThreadedNotifier(wm, self.update)
        wm.add_watch(self.watchdir, mask)
        self.notifier.start()

        t = Thread(target=self.timer_update)
        t.daemon = True
        t.start()

        gtk.main()

if __name__ == "__main__":
    app = Liteupdater()
    try:
        app.main()
    except KeyboardInterrupt:
        app.quit()
