#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2016 Johnathan "Shaggytwodope" Jenkins <twodopeshaggy@gmail.com>
#
# Distributed under terms of the GPL2 license.

import os
from gi.repository import Gtk

config = []
try:
    for line in open(os.path.expanduser("~") + '/.config' +
                     '/lite-updater.conf'):
        line = line.rstrip()
        config.append(line)
except:
    config = ["1800", "3600", "3000",  "True"]


class Autostart(object):

    def user_autostart_path(self):
        config_autostart_path = os.getenv("HOME") + "/.config/autostart/"

        if not os.path.exists(config_autostart_path):
            os.makedirs(config_autostart_path)

        return config_autostart_path + "lite-updater.desktop"

    def is_installed(self):
        return os.path.exists(self.user_autostart_path())

    def install(self):
        with open(self.user_autostart_path(), "w") as desktop_file:
            desktop_file.write("""[Desktop Entry]
Type=Application
Version=0.1
Name=Lite-Updater
GenericName=Lite-Updater
Comment=Linux Lite Update Checker
Exec=/usr/bin/lite-updater
Terminal=false
Categories=GTK;Utility;
StartupNotify=true""")

        return True

    def uninstall(self):
        os.remove(self.user_autostart_path())


class ConfWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title="Lite Updater Configuration Tool")
        self.set_border_width(8)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_icon_from_file(
            '/usr/share/lite-updater/icons/updates-idle.png')
        grid = Gtk.Grid(column_homogeneous=False, column_spacing=4,
                        row_spacing=5)
        self.add(grid)

        self.label1 = Gtk.Label("Set update check timer in <u><b>minutes</b></u>.",
                                xalign=0)
        self.label1.set_use_markup(True)
        adjustment = Gtk.Adjustment(0, 5, 59, 1, 10, 0)
        policy = Gtk.SpinButtonUpdatePolicy.IF_VALID
        retime = (int(config[0]) / 60)
        delayonevalue = retime
        self.spinbutton1 = Gtk.SpinButton()
        self.spinbutton1.set_adjustment(adjustment)
        self.spinbutton1.set_update_policy(policy)
        self.spinbutton1.set_value(delayonevalue)

        self.label2 = Gtk.Label("Set update check timer in <u><b>hours</b></u>.",
                                xalign=0)
        self.label2.set_use_markup(True)
        adjustment = Gtk.Adjustment(0, 0, 23, 1, 10, 0)
        policy = Gtk.SpinButtonUpdatePolicy.IF_VALID
        retime = (int(config[1]) / 60 / 60)
        delaytwovalue = retime
        self.spinbutton2 = Gtk.SpinButton()
        self.spinbutton2.set_adjustment(adjustment)
        self.spinbutton2.set_update_policy(policy)
        self.spinbutton2.set_value(delaytwovalue)

        self.label3 = Gtk.Label("Set notification display length in <u><b>seconds</b></u>.",
                                xalign=0)
        self.label3.set_use_markup(True)
        adjustment = Gtk.Adjustment(0, 1, 60, 1, 10, 0)
        policy = Gtk.SpinButtonUpdatePolicy.IF_VALID
        retime = (int(config[2]) / 1000)
        delaythreevalue = retime
        self.spinbutton3 = Gtk.SpinButton()
        self.spinbutton3.set_adjustment(adjustment)
        self.spinbutton3.set_update_policy(policy)
        self.spinbutton3.set_value(delaythreevalue)

        self.label7 = Gtk.Label("Show event notifications.", xalign=0)
        self.check = Gtk.CheckButton()
        if config[3] == "True":
            self.check.set_active(True)
            self.spinbutton3.set_sensitive(True)
        elif config[3] == "False":
            self.check.set_active(False)
            self.spinbutton3.set_sensitive(False)

        self.check.connect("toggled", self.checksig)

        if Autostart().is_installed():
            self.button3 = Gtk.Button("Disable Autostart",
                                      image=Gtk.Image(stock=Gtk.STOCK_REMOVE))
        else:
            self.button3 = Gtk.Button("Enable Autostart",
                                      image=Gtk.Image(stock=Gtk.STOCK_ADD))
        self.button3.connect("clicked", self.autostart)

        self.button4 = Gtk.Button("Restore Defaults",
                                  image=Gtk.Image(stock=Gtk.STOCK_REFRESH))
        self.button4.connect("clicked", self.default)

        self.button5 = Gtk.Button("Cancel",
                                  image=Gtk.Image(stock=Gtk.STOCK_CANCEL))
        self.button5.connect("clicked", self.cancel)

        self.button6 = Gtk.Button("Apply",
                                  image=Gtk.Image(stock=Gtk.STOCK_APPLY))
        self.button6.connect("clicked", self.apply)

        grid.attach(self.label1, 0, 0, 2, 1)
        grid.attach(self.spinbutton1, 2, 0, 2, 1)

        grid.attach(self.label2, 0, 1, 2, 1)
        grid.attach(self.spinbutton2, 2, 1, 2, 1)

        grid.attach(self.label3, 0, 3, 2, 1)
        grid.attach(self.spinbutton3, 2, 3, 2, 1)
        grid.attach(self.label7, 0, 6, 2, 1)
        grid.attach(self.check, 2, 6, 1, 1)
        grid.attach(self.button3, 0, 7, 1, 1)
        grid.attach(self.button4, 1, 7, 1, 1)
        grid.attach(self.button5, 2, 7, 1, 1)
        grid.attach(self.button6, 3, 7, 1, 1)

    def checksig(self, configalter):
        if self.check.get_active() is True:
            self.spinbutton3.set_sensitive(True)

        elif self.check.get_active() is False:
            self.spinbutton3.set_sensitive(False)

    def doauto_start(self, foo):
        if Autostart().is_installed():
            pass
        else:
            Autostart().install()

    def doauto_remove(self, foo):
        if Autostart().is_installed():
            Autostart().uninstall()
        else:
            pass

    def autostart(self, button):
        if Autostart().is_installed():
            self.doauto_remove(button)
            self.button3.set_label("Enable Autostart")
            self.button3.set_image(image=Gtk.Image(stock=Gtk.STOCK_ADD))
        else:
            self.doauto_start(button)
            self.button3.set_label("Disable Autostart")
            self.button3.set_image(image=Gtk.Image(stock=Gtk.STOCK_REMOVE))

    def default(self, button):
        config = ["1800", "3600", "3000",  "True"]
        configfile = open(os.path.expanduser("~") + '/.config' +
                          '/lite-updater.conf', "w")
        for item in config:
            configfile.write("%s\n" % item)
        self.spinbutton1.set_value(30)
        self.spinbutton2.set_value(1)
        self.spinbutton3.set_value(3)
        self.check.set_active(True)
        self.apply

    def cancel(self, button):
        Gtk.main_quit()

    def apply(self, button):
        mins = self.spinbutton1.get_value_as_int()
        config[0] = mins * 60
        hours = self.spinbutton2.get_value_as_int()
        config[1] = hours * 60 * 60
        dseconds = self.spinbutton3.get_value_as_int()
        config[2] = dseconds * 1000
        config[3] = self.check.get_active()

        configfile = open(os.path.expanduser("~") + '/.config' +
                          '/lite-updater.conf', "w")
        for item in config:
            configfile.write("%s\n" % item)
        Gtk.main_quit()

win = ConfWindow()
win.connect("delete-event", Gtk.main_quit)
win.show_all()
Gtk.main()
